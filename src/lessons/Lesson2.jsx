import React from 'react';
import { NavLink } from 'react-router-dom';

import './Lesson.scss'

const Lesson2 = () => {
    return (
        <div className="lesson">
            <h3>2. Реляционные базы данных. Ограничения целостности</h3>
            <hr />
            <p>&nbsp;</p>
            <p>Американский математик Э.Ф.Кодд (E.F.Codd) в 1970 впервые сформулировал основные понятия и ограничения реляционной модели. Цели создания реляционной модели формулировались следующим образом:</p>
            <p>Коммерческие системы на основе реляционной модели данных начали появляться в конце 70-х – начале 80-х годов. Благодаря популярности реляционной модели многие нереляционные системы теперь обеспечиваются реляционным пользовательским интерфейсом, независимо от используемой базовой модели.</p>
            <p>Кроме того, позже были предложены некоторые расширения реляционной модели данных, предназначенные для наиболее полного и точного выражения смысла данных, для поддержки объектно-ориентированных, а также для поддержки дедуктивных возможностей.</p>
            <p>Реляционная модель основана на математическом понятии отношения<strong>,</strong> физическим представлением которого является таблица<strong>.</strong> Дело в том, что Кодд, будучи опытным математиком, широко использовал математическую терминологию, особенно из теории множеств и логики предикатов.</p>
            <p>&nbsp;</p>
            <p><strong><em>Отношение</em> </strong>– это плоская таблица, состоящая из столбцов и строк.</p>
            <p>В любой реляционной СУБД предполагается, что пользователь воспринимает базу данных как набор таблиц. Однако следует подчеркнуть, что это восприятие относится только к логической структуре базы данных, т.е. ко внешнему и концептуальному уровням. Подобное восприятие не относится к физической структуре базы данных, которая может быть реализована с помощью различных структур.</p>
            <p>&nbsp;</p>
            <p><strong><em>Атрибут</em></strong> - это поименованный столбец отношения.</p>
            <p>В реляционной модели отношения используются для хранения информации об объектах, представленных в базе данных. Отношение обычно имеет вид двумерной таблицы, в которой строки соответствуют отдельным записям, а столбцы - атрибутам. При этом атрибуты могут располагаться в любом порядке, независимо от их переупорядочивания, отношение будет оставаться одним и тем же, а потому иметь тот же смысл. Например, информация об отделениях компании может быть представлена отношением Branch, включающим столбцы с атрибутами Вno (Номер отделения), Street (Улица), City (Город), Postcode (Почтовый индекс), Tel_ No (Номер телефона) и Fax_ No (Номер факса). Аналогично, информация о работниках компании может быть представлена отношением Staff (Персонал), включающим столбцы с атрибутами Sno (Личный номер сотрудника), FName (Имя), LName (Фамилия), Address (Адрес), Tel_No (Номер телефона), Position (Должность), Gender (Пол), DOB (Дата рождения), Salary (Зарплата), INN (Личный номер социального страхования) и Вno (Номер отделения, в котором данный сотрудник работает). <p>&nbsp;</p> В таблицах 1 и 2 показаны примеры отношений Branch и Staff. Каждый столбец содержит значения одного и того же атрибута, например столбец Вnо содержит только номера существующих отделений компании.</p>
            <p>Элементами отношения являются кортежи, или строки, таблицы. <strong>Кортеж</strong> – это строка отношения. В отношении Branch каждая строка содержит 6 значений, по одному для каждого атрибута. Кортежи могут располагаться в любом порядке, при этом отношение будет оставаться тем же самым, а значит, и иметь тот же смысл.</p>
            <p>Примеры отношений Branch и Staff.</p>
            <p>&nbsp;</p>
            <p align="center"><span>Таблица 1. </span>Отношение Branch</p>
            <table className="striped" border="1" width="700" cellspacing="1" cellpadding="3" align="center">
                <tbody>
                <tr>
                <td valign="top" width="106">
                <p>Bno</p>
                </td>
                <td valign="top" width="106">
                <p>City</p>
                </td>
                <td valign="top" width="106">
                <p>Postcode</p>
                </td>
                <td valign="top" width="106">
                <p>Street</p>
                </td>
                <td valign="top" width="106">
                <p>Tel_No</p>
                </td>
                <td valign="top" width="106">
                <p>Fax_No</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="106">
                <p>23</p>
                </td>
                <td valign="top" width="106">
                <p>Москва</p>
                </td>
                <td valign="top" width="106">
                <p>111111</p>
                </td>
                <td valign="top" width="106">
                <p>Победы</p>
                </td>
                <td valign="top" width="106">
                <p>1231112</p>
                </td>
                <td valign="top" width="106">
                <p>1231113</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="106">
                <p>24</p>
                </td>
                <td valign="top" width="106">
                <p>Ростов</p>
                </td>
                <td valign="top" width="106">
                <p>3334546</p>
                </td>
                <td valign="top" width="106">
                <p>Октябрьская</p>
                </td>
                <td valign="top" width="106">
                <p>1334456</p>
                </td>
                <td valign="top" width="106">
                <p>1334455</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="106">
                <p>25</p>
                </td>
                <td valign="top" width="106">
                <p>Самара</p>
                </td>
                <td valign="top" width="106">
                <p>456009</p>
                </td>
                <td valign="top" width="106">
                <p>Лесная</p>
                </td>
                <td valign="top" width="106">
                <p>1213345</p>
                </td>
                <td valign="top" width="106">
                <p>1213346</p>
                </td>
                </tr>
                </tbody>
            </table>
            <p>&nbsp;</p>
            <p align="center"><span>Таблица 2</span>. Отношение Staff</p>
            <table className="striped" border="1" width="700" cellspacing="1" cellpadding="3" align="center">
                <tbody>
                <tr>
                <td valign="top" width="47">
                <p>Sno</p>
                </td>
                <td valign="top" width="61">
                <p>FName</p>
                </td>
                <td valign="top" width="72">
                <p>LName</p>
                </td>
                <td valign="top" width="59">
                <p>Adress</p>
                </td>
                <td valign="top" width="60">
                <p>Tel_No</p>
                </td>
                <td valign="top" width="74">
                <p>Position</p>
                </td>
                <td valign="top" width="47">
                <p>Gender</p>
                </td>
                <td valign="top" width="61">
                <p>DOB</p>
                </td>
                <td valign="top" width="54">
                <p>Salary</p>
                </td>
                <td valign="top" width="55">
                <p>INN</p>
                </td>
                <td valign="top" width="48">
                <p>Bno</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="47">
                <p>234</p>
                </td>
                <td valign="top" width="61">
                <p>Иван</p>
                </td>
                <td valign="top" width="72">
                <p>Иванов</p>
                </td>
                <td valign="top" width="59">
                <p>Москва</p>
                <p>Победы 14-24</p>
                </td>
                <td valign="top" width="60">
                <p>121112</p>
                </td>
                <td valign="top" width="74">
                <p>Менеджер</p>
                </td>
                <td valign="top" width="47">
                <p>м</p>
                </td>
                <td valign="top" width="61">
                <p>01.01.67</p>
                </td>
                <td valign="top" width="54">
                <p>500$</p>
                </td>
                <td valign="top" width="55">
                <p>441414</p>
                </td>
                <td valign="top" width="48">
                <p>23</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="47">
                <p>235</p>
                </td>
                <td valign="top" width="61">
                <p>Марина</p>
                </td>
                <td valign="top" width="72">
                <p>Смирнова</p>
                </td>
                <td valign="top" width="59">
                <p>Москва</p>
                <p>Ленина 215-35</p>
                </td>
                <td valign="top" width="60">
                <p>1417877</p>
                </td>
                <td valign="top" width="74">
                <p>Менеджер</p>
                </td>
                <td valign="top" width="47">
                <p>ж</p>
                </td>
                <td valign="top" width="61">
                <p>01.01.75</p>
                </td>
                <td valign="top" width="54">
                <p>500$</p>
                </td>
                <td valign="top" width="55">
                <p>543243</p>
                </td>
                <td valign="top" width="48">
                <p>25</p>
                </td>
                </tr>
                </tbody>
            </table>
            <p>&nbsp;</p>
            <p><strong><em>Степень отношения</em></strong> определяется количеством атрибутов, которое оно содержит.</p>
            <p>Отношение Branch (см. табл. 1) имеет шесть атрибутов и, следовательно, его степень равна шести. Это значит, что каждая строка таблицы является 6-арным кортежем, т.е. кортежем, содержащим шесть значений. Отношение только с одним атрибутом имеет степень 1 и называется <em>унарным</em> (unary) отношением (или 1-арным кортежем). Отношение с двумя атрибутами называется <em>бинарным</em> (binary), отношение с тремя атрибутами –<em> тернарным</em> (ternary), а для отношений с большим количеством атрибутов используется термин <em>n</em>-<em>арный</em> (<em>n</em>-ary). Определение степени отношения является частью заголовка отношения.</p>
            <p>Количество содержащихся в отношении кортежей называется кардинальностью отношения. Эта характеристика меняется при каждом добавлении или удалении кортежей. Кардинальность является свойством тела отношения и определяется текущим состоянием отношения в произвольно взятый момент.</p>
            <p>&nbsp;</p>
            <p><em>Альтернативная терминология.</em> Терминология, используемая в реляционной модели, порой может привести к путанице, поскольку помимо предложенных терминов существует еще один. Отношение в нем называется таблицей , кортежи – записями (records), а атрибуты – полями (fields). Эта терминология основана на том факте, что физически СУБД может хранить каждое отношение в отдельном файле. В табл. 3 показаны соответствия, существующие между упомянутыми выше группами терминов.</p>
            <p>&nbsp;</p>
            <p align="center">Таблица 3. Альтернативные варианты терминов в реляционной модели</p>
            <table className="striped" border="1" cellspacing="1" cellpadding="3" align="center">
                <tbody>
                <tr>
                <td valign="top" width="213">
                <p>Вариант1</p>
                </td>
                <td valign="top" width="213">
                <p>Вариант2</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="213">
                <p>Отношение</p>
                </td>
                <td valign="top" width="213">
                <p>Таблица</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="213">
                <p>Кортеж</p>
                </td>
                <td valign="top" width="213">
                <p>Запись</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="213">
                <p>Атрибут</p>
                </td>
                <td valign="top" width="213">
                <p>Поле</p>
                </td>
                </tr>
                </tbody>
            </table>
            <p>&nbsp;</p>
            <p>Далее в пособии могут использоваться термины из обоих вариантов.</p>
            <p>&nbsp;</p>
            <p><em>Фундаментальные свойства отношений (таблиц)</em></p>
            <p>&nbsp;</p>
            <p>Отношение обладает следующими характеристиками:</p>
            <ul>
                <li>• оно имеет имя, которое отличается от имен всех других отношений;</li>
                <li>• каждая ячейка отношения содержит только атомарное (неделимое) значение;</li>
                <li>• каждый атрибут имеет уникальное имя;</li>
                <li>• значения атрибута берутся из одного и того же домена;</li>
                <li>• порядок следования атрибутов не имеет никакого значения;</li>
                <li>• каждый кортеж является уникальным, т.е. дубликатов кортежей быть не может;</li>
                <li>• теоретически порядок следования кортежей в отношении не имеет никакого значения. (Однако практически этот порядок может существенно повлиять на эффективность доступа к ним.)</li>
            </ul>
            <p>&nbsp;</p>
            <p>Для иллюстрации смысла этих ограничений рассмотрим отношение Branch (см. табл. 1). Поскольку каждая ячейка должна содержать только одно значение, то не допускается хранение в одной и той же ячейке двух номеров телефона одного и того же отделения компании. Иначе говоря, отношения не могут содержать повторяющихся групп. Об отношении, которое обладает таким свойством, говорят, что оно нормализовано, или находится в первой нормальной форме. (Более подробно нормальные формы рассматриваются ниже)</p>
            <p>Имена столбцов, указанные в их верхней строке, соответствуют именам атрибутов отношения. Значения атрибута Bno берутся из домена BRANCH_NUMBERS - не допускается размещение в этом столбце иных значений, например почтового индекса. Столбцы можно менять местами при условии, что имя атрибута перемещается вместе с его значениями. Таблица все еще будет представлять то же отношение, если атрибут Tel_No расположить в ней перед атрибутом Postcode, хотя для лучшей читабельности разумнее было бы располагать отдельные части адреса поблизости.</p>
            <p>&nbsp;</p>
            <p>Отношение не может содержать кортежей-дубликатов. Например, строка ( 23, Москва, 111111, Победы, 1231112, 1231113) может быть представлена в отношении только один раз. При необходимости строки можно менять местами произвольным образом (например, переместить строку отделения ‘23’ на место строки отделения ‘24’), само отношение при этом останется прежним.</p>
            <p>Большая часть свойств отношений происходит от свойств математических отношений реляционной алгебры.</p>
            <p>Как уже говорилось, наиболее популярны реляционные модели данных. В соответствии с реляционной моделью данных данные представляются в виде совокупности таблиц, над которыми могут выполняться операции, формулируемые в терминах реляционной алгебры или реляционного исчисления.</p>
            <p>В отличие от иерархических и сетевых моделей данных в реляционной модели операции над объектами имеют теоретико-множественный характер. Это дает возможность пользователям формулировать их запросы более компактно, в терминах более крупных агрегатов данных.</p>
            <p>&nbsp;</p>
            <p>Рассмотрим терминологию, используемую при работе с реляционными базами данных.</p>
            <p>&nbsp;</p>
            <p><strong><em>Первичный ключ</em>. </strong>Первичным ключом называется поле или набор полей, однозначно идентифицирующих запись.</p>
            <p>Нередко возможны несколько вариантов выбора первичного ключа. Например, в небольшой организации первичными ключами сущности "сотрудник" могут быть как табельный номер, так и комбинация фамилии, имени и отчества (при уверенности, что в организации нет полных тезок), либо номер и серия паспорта (если паспорта есть у всех сотрудников). В таких случаях при выборе первичного ключа предпочтение отдается наиболее простым ключам (в данном примере - табельному номеру). Другие кандидаты на роль первичного ключа называются альтернативными ключами.</p>
            <p>&nbsp;</p>
            <p>Требования, предъявляемые к первичному ключу:</p>
            <ul>
                <li>• уникальность – то есть в таблице не должно существовать двух или более записей с одинаковым значением первичного ключа;</li>
                <li>• первичный ключ не должен содержать пустых значений.</li>
            </ul>
            <p>&nbsp;</p>
            <p>При выборе первичного ключа рекомендуется выбирать атрибут, значение которого не меняется в течение всего времени существования экземпляра (в этом случае табельный номер предпочтительнее фамилии, так как ее можно сменить, вступив в брак).</p>
            <p>По полям, которые часто используются при поиске и сортировке данных устанавливаются <strong><em>вторичные ключи</em></strong>: они помогут системе значительно быстрее найти нужные данные. В отличие от первичных ключей поля для индексов (вторичные ключи) могут содержать неуникальные значения.</p>
            <p>Первичные ключи используются для установления связей между таблицами в реляционной БД. В этом случае первичному ключу одной таблицы (родительской) соответствует <strong><em>внешний ключ</em></strong> другой таблицы (дочерней). Внешний ключ содержит значения связанного с ним поля, являющегося первичным ключом. Значения во внешнем ключе могут быть неуникальными, но не должны быть пустыми. Первичный и внешний ключи должны быть одинакового типа.</p>
            <p>&nbsp;</p>
            <p><strong><em>Связи между таблицами</em></strong><em>.</em> Записи в таблице могут зависеть от одной или нескольких записей другой таблицы. Такие отношения между таблицами называются <em>связями.</em> Связь определяется следующим образом: поле или несколько полей одной таблицы, называемое <em>внешним ключом,</em> ссылается на первичный ключ другой таблицы. Рассмотрим пример. Так как каждый заказ должен исходить от определенного клиента, каждая запись таблицы <em>Orders</em> (заказы) должна ссылаться на соответствующую запись таблицы <em>Customers</em> (клиенты). Это и есть связь между таблицами <em>Orders</em> и <em>Customers.</em> В таблице <em>Orders</em> должно быть поле, где хранятся ссылки на те или иные записи таблицы <em>Customers.</em></p>
            <p>&nbsp;</p>
            <p>Существует три типа связей между таблицами.</p>
            <p>&nbsp;</p>
            <p><strong><em>Один к одному</em></strong><em> —</em> каждая запись родительской таблицы связана только с одной записью дочерней. Такая связь встречается на практике намного реже, чем отношение <em>один ко многим </em>и реализуется путем определения уникального внешнего ключа. Связь <em> один к одному</em> используют, если не хотят, чтобы таблица «распухала» от большого числа полей. Базы данных, в состав которых входят таблицы с такой связью не могут считаться полностью нормализованными.</p>
            <p>&nbsp;</p>
            <p><strong><em>Один ко многим</em></strong><em> —</em> каждая запись родительской таблицы связана с одной или несколькими записями дочерней. Например, один клиент может сделать несколько заказов, однако несколько клиентов не могут сделать один заказ. Связь о<em>дин ко многим </em>является самой распространенной для реляционных баз данных.</p>
            <p>&nbsp;</p>
            <p><strong><em>Многие ко многим</em></strong><em> —</em> несколько записей одной таблицы связаны с несколькими записями другой. Например, один автор может написать несколько книг и несколько авторов — одну книгу. В случае такой связи в общем случае невозможно определить, какая запись одной таблицы соответствует выбранной записи другой таблицы, что делает неосуществимой физическую (на уровне индексов и триггеров) реализацию такой связи между соответствующими таблицами. Поэтому перед переходом к физической модели все связи "многие ко многим" должны быть переопределены (некоторые CASE-средства, если таковые используются при проектировании данных, делают это автоматически).Подобная связь между двумя таблицами реализуется путем создания третьей таблицы и реализации связи типа «один ко многим» каждой из имеющихся таблиц с промежуточной таблицей.</p>
            <p>&nbsp;</p>
            <p>Для рассмотрения ссылочной целостности возьмем в качестве примера наиболее часто встречающуюся в базах данных связь один-ко-многим – см таблицы 4 и 5. Как можно заметить, дочерняя и родительская таблицы связаны между собой по общему полю «Товар». Назовем это поле полем связи.</p>
            <p>&nbsp;</p>
            <p align="center">Таблица 4. Таблица «Товары»</p>
            <table className="striped" border="1" cellspacing="1" cellpadding="3" align="center">
                <tbody>
                <tr>
                <td valign="top" width="91">
                <p >Товар</p>
                </td>
                <td valign="top" width="90">
                <p >Ед изм</p>
                </td>
                <td valign="top" width="91">
                <p >Цена</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p >Сахар</p>
                </td>
                <td valign="top" width="90">
                <p >кг</p>
                </td>
                <td valign="top" width="91">
                <p align="center">18</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p >Макароны</p>
                </td>
                <td valign="top" width="90">
                <p>кг</p>
                </td>
                <td valign="top" width="91">
                <p align="center">18</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p >Куры</p>
                </td>
                <td valign="top" width="90">
                <p>кг</p>
                </td>
                <td valign="top" width="91">
                <p align="center">90</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p >Фанта</p>
                </td>
                <td valign="top" width="90">
                <p >бут</p>
                </td>
                <td valign="top" width="91">
                <p align="center">20</p>
                </td>
                </tr>
                </tbody>
            </table>
            <p>&nbsp;</p>
            <p align="center"><span>Таблица 5</span>. Таблица «Отпуск товаров»</p>
            <table className="striped" border="1" cellspacing="1" cellpadding="3" align="center">
                <tbody>
                <tr>
                <td valign="top" width="91">
                <p >Товар</p>
                </td>
                <td valign="top" width="91">
                <p >Дата</p>
                </td>
                <td valign="top" width="94">
                <p >Количество</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p >Сахар</p>
                </td>
                <td valign="top" width="91">
                <p >10.12.07.</p>
                </td>
                <td valign="top" width="94">
                <p align="center">100</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p >Сахар</p>
                </td>
                <td valign="top" width="91">
                <p >12.12.07.</p>
                </td>
                <td valign="top" width="94">
                <p align="center">200</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p >Сахар</p>
                </td>
                <td valign="top" width="91">
                <p >14.12.07</p>
                </td>
                <td valign="top" width="94">
                <p align="center">50</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p>Макароны</p>
                </td>
                <td valign="top" width="91">
                <p >10.12.07</p>
                </td>
                <td valign="top" width="94">
                <p align="center">1000</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p>Макароны</p>
                </td>
                <td valign="top" width="91">
                <p >12.12.07</p>
                </td>
                <td valign="top" width="94">
                <p align="center">500</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p>Фанта</p>
                </td>
                <td valign="top" width="91">
                <p >07.12.07</p>
                </td>
                <td valign="top" width="94">
                <p align="center">2000</p>
                </td>
                </tr>
                <tr>
                <td valign="top" width="91">
                <p>Фанта</p>
                </td>
                <td valign="top" width="91">
                <p >05.12.07</p>
                </td>
                <td valign="top" width="94">
                <p align="center">3000</p>
                </td>
                </tr>
                </tbody>
            </table>
            <p>&nbsp;</p>
            <p>Возможны два вида изменений, которые приведут к утере связей между записями в родительской и дочерней таблицах:</p>
            <ul>
                <li>• изменение значения поля связи в записи родительской таблицы без изменения значений полей связи в соответствующих записях дочерней таблицы;</li>
                <li>• изменение значения поля связи в одной из записей дочерней таблицы без соответствующего изменения значения полей связи в родительской и дочерней таблицах.</li>
            </ul>
            <p>&nbsp;</p>
            <p>Рассмотрим первый случай. Если изменить значения поля «Товар» с «Сахар» на «Рафинад» в таблице «Товары», а в таблице «Отпуск товаров» значение поля связи «Сахар» оставить прежним. В результате получим:</p>
            <ul>
                <li>• в дочерней таблице «Отпуск товаров» для товара «Рафинад» (таблица «Товары») нет сведений о его отпуске со склада;</li>
                <li>• некоторые записи таблицы «Отпуск товаров» содержат сведения об отпуске товара «Сахар», о котором нет информации в таблице «Товары».</li>
            </ul>
            <p>&nbsp;</p>
            <p>Рассмотрим второй случай. Пусть в одной из записей таблицы «Отпуск товаров» значение поля связи «Сахар» изменилось на «Рафинад». В результате:</p>
            <ul>
                <li>• в дочерней таблице «Отпуск товаров» недостоверны сведения об отпуске со склада товара «Сахар» (таблица «Товары»);</li>
                <li>• одна из записей таблицы «Отпуск товаров» содержит данные об отпуске товара «Рафинад», сведения о котором отсутствуют в таблице «Товары».</li>
            </ul>
            <p>&nbsp;</p>
            <p>И в первом, и втором случае мы наблюдаем нарушение целостности базы данных; это означает, что хранящаяся в ней информация становится недостоверной.</p>
            <p>СУБД обычно блокирует действия, которые нарушают целостность связей между таблицами, т.е. нарушают ссылочную целостность. <em>Когда говорят о ссылочной целостности, имеют в виду совокупность связей между отдельными таблицами во всей БД.</em> Нарушение хотя бы одной такой связи делает информацию в БД недостоверной.</p>
            <p>Чтобы предотвратить потерю ссылочной целостности, используется <em>механизм каскадных изменений</em>. Он состоит в обеспечении следующих действий:</p>
            <ul>
                <li>• при изменении поля связи в записи родительской таблицы следует синхронно изменить значения полей связи в соответствующих записях дочерней таблицы;</li>
                <li>• при удалении записи в родительской таблице следует удалить соответствующие записи в дочерней таблице.</li>
            </ul>
            <p>Изменения или удаления в записях дочерней таблицы при одновременном изменении (удалении) записи родительской таблицы называются каскадными изменениями и каскадными удалениями.</p>
            <p>&nbsp;</p>
            <p>Существует другая разновидность каскадного удаления: при удалении родительской записи в записях дочерних таблиц значения полей связи обнуляются. Эта разновидность применяется редко, т.к. дочерние таблицы в этом случае будут содержать избыточные данные, например, сведения о товаре, которого нет на складе.</p>
            <p>Обычно для реализации ссылочной целостности в дочерней таблице создают внешний ключ, в который входят поля связи дочерней таблицы. Этот ключ для дочерней таблицы является первичным и поэтому по составу полей должен совпадать с, первичным ключом родительской таблицы или реже - с частью первичного ключа.</p>
            <p>&nbsp;</p>
            <hr />
            <div className="lesson-nav">

                <NavLink to="/lesson1">
                    <a href="/lesson1" className="waves-effect waves-light btn-large nav-bottom">&larr; Предыдущий урок</a>
                </NavLink>
                
                <NavLink to="/lesson3">
                    <a href="/lesson3" className="waves-effect waves-light btn-large nav-bottom">Следующий урок &rarr;</a>
                </NavLink>
            </div>

        </div>
    );
}

export default Lesson2;
